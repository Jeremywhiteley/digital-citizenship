{
    "swagger": "2.0",
    "info": {
        "version": "v1 - demo",
        "title": "Preferences",
        "description": "The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider. The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider."
    },
    "host": "pldgicrgsdfkmt6iq-mock.stoplight-proxy.io",
    "basePath": "/v1",
    "schemes": [
        "https"
    ],
    "paths": {
        "/Users/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The key of the user to query. The user must be in the organization domain",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }
            ],
            "get": {
                "operationId": "getUser",
                "summary": "Get User",
                "tags": [
                    "Users"
                ],
                "description": "Queries user identity in the organization domain.",
                "responses": {
                    "200": {
                        "description": "The request has succeeded.",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "401": {
                        "description": "Client is not sufficiently authorized"
                    },
                    "403": {
                        "description": "Invalid token passed"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "502": {
                        "description": "Authentication or account gateway error occurred"
                    },
                    "504": {
                        "description": "Authentication or account gateway timeout occurred"
                    }
                }
            }
        }
    },
    "responses": {
        "trait:apiErrors:400": {
            "description": "",
            "schema": {
                "description": "",
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": ""
                    },
                    "message": {
                        "type": "string",
                        "default": ""
                    },
                    "status": {
                        "type": "integer",
                        "default": 400
                    }
                }
            }
        },
        "trait:apiErrors:401": {
            "description": "",
            "schema": {
                "description": "",
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": ""
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer",
                        "default": 401
                    }
                }
            }
        },
        "trait:apiErrors:404": {
            "description": "",
            "schema": {
                "type": "object",
                "description": "",
                "properties": {
                    "error": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer",
                        "default": 404
                    }
                }
            }
        }
    },
    "definitions": {
        "UserDefinition": {
            "title": "UserDefinition",
            "description": "Describes a user",
            "type": "object",
            "properties": {
                "userName": {
                    "type": "string",
                    "description": "The user's fiscalNumber.",
                    "faker": "internet.userName"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Email"
                    }
                },
                "preferredLanguage": {
                    "type": "string"
                }
            },
            "required": [
                "userName"
            ]
        },
        "UserCollection": {
            "title": "UserCollection",
            "description": "Class describing a collection of users",
            "properties": {
                "resources": {
                    "description": "The list of users",
                    "items": {
                        "$ref": "#/definitions/User"
                    },
                    "type": "array"
                },
                "totalResults": {
                    "description": "The number of users in the collection",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "resources",
                "totalResults"
            ]
        },
        "User": {
            "title": "User",
            "description": "Describes a user belonging to an organization",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The user's unique key",
                            "format": "uuid"
                        }
                    },
                    "required": [
                        "id"
                    ]
                },
                {
                    "$ref": "#/definitions/UserDefinition"
                }
            ]
        },
        "Email": {
            "title": "Email",
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "faker": "lorem.word"
                },
                "primary": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string",
                    "format": "email",
                    "faker": "internet.email"
                }
            },
            "required": [
                "value"
            ]
        }
    }
}