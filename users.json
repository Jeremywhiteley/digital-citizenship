{
    "swagger": "2.0",
    "info": {
        "version": "v1 - demo",
        "title": "SCIM",
        "description": "The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider. The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider."
    },
    "host": "pldgicrgsdfkmt6iq-mock.stoplight-proxy.io",
    "basePath": "/v1",
    "schemes": [
        "https"
    ],
    "paths": {
        "/Users/{userKey}": {
            "parameters": [
                {
                    "name": "userKey",
                    "in": "path",
                    "description": "The key of the user to query. The user must be in the organization domain",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }
            ],
            "get": {
                "operationId": "getUser",
                "summary": "Get User",
                "tags": [
                    "Users"
                ],
                "description": "Queries user identity in the organization domain.",
                "responses": {
                    "200": {
                        "description": "The request has succeeded.",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "401": {
                        "description": "Client is not sufficiently authorized"
                    },
                    "403": {
                        "description": "Invalid token passed"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "502": {
                        "description": "Authentication or account gateway error occurred"
                    },
                    "504": {
                        "description": "Authentication or account gateway timeout occurred"
                    }
                }
            },
            "patch": {
                "operationId": "updateUser",
                "summary": "Update User",
                "tags": [
                    "Users"
                ],
                "description": "Changes a limited set (or all if you choose) of the user's data. The updated user email domain must be an existing organization email domain.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user has been updated.",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "One of the following requirements is not met:<br />The userName field is required.<br />The userName field must be non-empty.<br />The userName field cannot exceed 128 characters.<br />The locale field must be composed of 1 or 2 parts.<br />The locale language sub-field must be ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The timezone field must be a valid timezone.<br />The givenName field must not exceed 60 characters.<br />The familyName field must not exceed 60 characters."
                    },
                    "401": {
                        "description": "Client is not sufficiently authorized"
                    },
                    "403": {
                        "description": "Invalid token passed"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "Email address conflict"
                    },
                    "502": {
                        "description": "Authentication or account gateway error occurred"
                    },
                    "504": {
                        "description": "Authentication or account gateway timeout occurred"
                    }
                }
            },
            "put": {
                "operationId": "replaceUser",
                "summary": "Replace User",
                "tags": [
                    "Users"
                ],
                "description": "Changes an existing user's displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user has been replaced.",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "One of the following requirements is not met:<br />The userName field is required.<br />The userName field must be non-empty.<br />The userName field cannot exceed 128 characters.<br />The locale field must be composed of 1 or 2 parts.<br />The locale language sub-field must be ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The timezone field must be a valid timezone.<br />The givenName field must not exceed 60 characters.<br />The familyName field must not exceed 60 characters."
                    },
                    "401": {
                        "description": "Client is not sufficiently authorized"
                    },
                    "403": {
                        "description": "Invalid token passed"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "Email address conflict"
                    },
                    "502": {
                        "description": "Authentication or account gateway error occurred"
                    },
                    "504": {
                        "description": "Authentication or account gateway timeout occurred"
                    }
                }
            }
        },
        "/Users": {
            "get": {
                "operationId": "getUsers",
                "summary": "Get Users",
                "tags": [
                    "Users"
                ],
                "description": "Queries multiple user identities in the organization domain. Filtering is available.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": " Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter=name.familyName%20eq%20%%22Smith%22",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request has succeeded.",
                        "schema": {
                            "$ref": "#/definitions/UserCollection"
                        }
                    },
                    "400": {
                        "description": "Invalid filter syntax"
                    },
                    "401": {
                        "description": "Client is not sufficiently authorized"
                    },
                    "403": {
                        "description": "Invalid token passed"
                    },
                    "502": {
                        "description": "Authentication or account gateway error occurred"
                    },
                    "504": {
                        "description": "Authentication or account gateway timeout occurred"
                    }
                }
            },
            "post": {
                "operationId": "createUsers",
                "summary": "Create User",
                "tags": [
                    "Users"
                ],
                "description": "Creates a new organization user and adds them to the user domain. The user email domain must match an existing organization email domain.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserDefinition"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The user has been created.",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "One of the following requirements is not met:<br />The userName field is required.<br />The userName field must be non-empty.<br />The userName field cannot exceed 128 characters.<br />The locale field must be composed of 1 or 2 parts.<br />The locale language sub-field must be ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The timezone field must be a valid timezone.<br />The givenName field must not exceed 60 characters.<br />The familyName field must not exceed 60 characters."
                    },
                    "401": {
                        "description": "Client is not sufficiently authorized."
                    },
                    "403": {
                        "description": "Invalid token passed"
                    },
                    "409": {
                        "description": "Username is already in use."
                    },
                    "502": {
                        "description": "Authentication, account, or email verification gateway error occurred."
                    },
                    "504": {
                        "description": "Authentication, account, or email verification gateway timeout occurred."
                    }
                }
            }
        }
    },
    "responses": {
        "trait:apiErrors:400": {
            "description": "",
            "schema": {
                "description": "Indicates that the request could not be parsed as JSON, or it contained invalid fields.",
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": "BadRequestError"
                    },
                    "message": {
                        "type": "string",
                        "default": ""
                    },
                    "status": {
                        "type": "integer",
                        "default": 400
                    }
                }
            }
        },
        "trait:apiErrors:401": {
            "description": "",
            "schema": {
                "description": "There was an error authenticating the sender account.",
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": "Authorisation header is missing"
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer",
                        "default": 401
                    }
                }
            }
        },
        "trait:apiErrors:403": {
            "description": "",
            "schema": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": "Forbidden"
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer",
                        "default": 403
                    }
                }
            }
        },
        "trait:apiErrors:404": {
            "description": "",
            "schema": {
                "type": "object",
                "description": "Not Found.",
                "properties": {
                    "error": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer"
                    }
                }
            }
        },
        "trait:apiErrors:429": {
            "description": "",
            "schema": {
                "type": "object",
                "description": "Quota excedeed.",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": "API Error"
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "default": 429,
                        "type": "integer"
                    }
                }
            }
        }
    },
    "definitions": {
        "UserDefinition": {
            "title": "UserDefinition",
            "description": "Describes a new user",
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The user's display name",
                    "faker": "internet.userName"
                },
                "name": {
                    "$ref": "#/definitions/UserFullName"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Email"
                    }
                },
                "phoneNumbers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                },
                "ims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Im"
                    }
                },
                "externalId": {
                    "type": "string"
                },
                "preferredLanguage": {
                    "type": "string"
                },
                "urn:scim:schemas:extension:italia:1.0": {
                    "type": "object",
                    "required": [
                        "fiscalNumber"
                    ],
                    "properties": {
                        "fiscalNumber": {
                            "type": "string"
                        },
                        "optOut": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "$ref": "#/definitions/OptOut"
                            }
                        }
                    }
                },
                "version": {
                    "type": "integer"
                }
            },
            "required": [
                "displayName",
                "name",
                "emails",
                "urn:scim:schemas:extension:italia:1.0"
            ]
        },
        "UserCollection": {
            "title": "UserCollection",
            "description": "Class describing a collection of users",
            "properties": {
                "resources": {
                    "description": "The list of users",
                    "items": {
                        "$ref": "#/definitions/User"
                    },
                    "type": "array"
                },
                "totalResults": {
                    "description": "The number of users in the collection",
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "resources",
                "totalResults"
            ]
        },
        "UserFullName": {
            "title": "UserFullName",
            "description": "The full name of the user",
            "properties": {
                "familyName": {
                    "description": "The user's surname",
                    "type": "string",
                    "faker": "name.lastName"
                },
                "givenName": {
                    "description": "The user's first name",
                    "type": "string",
                    "faker": "name.firstName"
                }
            },
            "required": [
                "familyName",
                "givenName"
            ]
        },
        "User": {
            "title": "User",
            "description": "Describes a user belonging to an organization",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The user's unique key",
                            "format": "uuid"
                        }
                    },
                    "required": [
                        "id"
                    ]
                },
                {
                    "$ref": "#/definitions/UserDefinition"
                }
            ]
        },
        "Email": {
            "title": "Email",
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "faker": "lorem.word"
                },
                "primary": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string",
                    "format": "email",
                    "faker": "internet.email"
                }
            },
            "required": [
                "value"
            ]
        },
        "PhoneNumber": {
            "title": "PhoneNumber",
            "type": "object",
            "properties": {
                "value": {
                    "type": "string",
                    "faker": "phone.phoneNumber"
                },
                "type": {
                    "type": "string",
                    "faker": "lorem.word"
                }
            },
            "required": [
                "value"
            ],
            "example": {
                "value": "1-047-149-5200 x41058",
                "type": "ut"
            }
        },
        "Im": {
            "title": "Im",
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "value"
            ]
        },
        "OptOut": {
            "title": "OptOut",
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                }
            }
        }
    }
}