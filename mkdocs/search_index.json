{
    "docs": [
        {
            "location": "/",
            "text": "Digital Citizenship\n\n\nIntroduction\n\n\nThe Digital Citizenship initiative aims to facilitate the relationship between citizens and the Public Administration through the creation of a platform of reusable components that can make digital services more effective and improve communication.\n\n\nDigital services get build from core components that ensure a consistent user experience for the citizens and provide reusable building blocks for the public services.\n\n\n\n\n\n  Services and Digital Applications\n\n  Digital services of regional and national administrations and bodies\n\n  Vertical Application of Digital Citizenship\n\n\n\n\n\n\n\n  \nIdentity\n\n  \nPreferences\n\n  \nCommunications\n\n  \nFinancial Transactions\n\n  \nArchive\n\n\n\n\n\n\n\n\n\n  \nCredentials and Personal Information (SPID)\n\n  \nHorizontal personal preferences (eg Language) and vertical (of a specific service)\n\n  \nReceive courtesy and lawful notifications\n\n  \nPayments and credits (pagoPA)\n\n  \nDigital archive of all documentation\n\n\n\n\n\n\n\n\n\nThe integration of the various components in the digital services provided by the Public Administration will enable the citizen to live the Digital Citizenship experience, bringing his identity and information transversely to the various performances.\n\n\nIn addition to existing components (pagoPA, SPID), AgID intends to provide other services to Public Administrations by realizing the components of Digital Citizenship in relation to the 'Preferences' of the citizens and the 'Communications' with the PA.\n\n\nCommunications\n\n\nAdministrations will be able to submit multichannel notifications (SMS, E-mail, PUSH Notification, etc.) to citizens who have subscribed to a special topic of interest (opt-in) on PA portals, and/or have indicated one or more delivery contacts to receive alerts from the Public Administration (eg deadlines, payments, status changes of a forwarded practice, etc.).\n\n\nThe citizen interacts with a single preference management service (SGP) that will be queried by the SdA at the time of forwarding a notice to find the preferred forwarding channels and the recipient's contact addresses.\nThe citizen therefore has no direct access to the system: the information systems of the parties involved in the service will be able to send alerts to the citizens through the provided API.\n\n\nRelated APIs\n\n\n\n\nNotifications API\n\n\n\n\nPreferences\n\n\nThe Preferences Management System (SGP) allows the citizen to centrally manage his personalization settings related to digital services provided by the Public Administration. Eg:\n\n\n\n\nOne or more addresses to receive communications from the alert system\n\n\nCommunication channels and subscription typologies (subscriptions)\n\n\nPreferred payment methods (pagoPA)\n\n\n\n\nThrough this information, SGP provides the consulting authorities with the opportunity to customize their digital services. Citizens do not have direct access to the system: administration information systems use the API to access (read) the attributes managed by the SGP on behalf of citizens authenticating on their digital services.\n\n\nRelated APIs\n\n\n\n\nPreferences API\n\n\n\n\nAdvantages\n\n\nFor citizens\n\n\n\n\nManage delivery contacts from a central access point (APP mobile and italia.it website)\n\n\nManage subscriptions (opt-in and opt-out) from a central access point\n\n\nAccess the communications history from a central access point\n\n\nMake simple transactional operations by means of notifications received (ie. payments)\n\n\n\n\nFor administrations\n\n\n\n\nSend electronic communications even without knowing the contact addresses of citizens, using only their fiscal code\n\n\nDelegate the management and updating of citizens' electronic delivery contacts\n\n\nGive more visibility to your notifications, where they come together in a wider / national context\n\n\nSoliciting deadlines and facilitating payments in a simple and safe way\n\n\nTransmit multi-channel communications for free\n\n\nAssign status to communications (eg to track the status of a practice)\n\n\nGet the delivery status (sent, received) of the communication and possibly reading the message where the channel allows it\n\n\n\n\nAPI docs\n\n\n\n\nNotifications API\n\n\nPreferences API",
            "title": "Home"
        },
        {
            "location": "/#digital-citizenship",
            "text": "",
            "title": "Digital Citizenship"
        },
        {
            "location": "/#introduction",
            "text": "The Digital Citizenship initiative aims to facilitate the relationship between citizens and the Public Administration through the creation of a platform of reusable components that can make digital services more effective and improve communication.  Digital services get build from core components that ensure a consistent user experience for the citizens and provide reusable building blocks for the public services.   \n  Services and Digital Applications \n  Digital services of regional and national administrations and bodies \n  Vertical Application of Digital Citizenship    \n   Identity \n   Preferences \n   Communications \n   Financial Transactions \n   Archive     \n   Credentials and Personal Information (SPID) \n   Horizontal personal preferences (eg Language) and vertical (of a specific service) \n   Receive courtesy and lawful notifications \n   Payments and credits (pagoPA) \n   Digital archive of all documentation     The integration of the various components in the digital services provided by the Public Administration will enable the citizen to live the Digital Citizenship experience, bringing his identity and information transversely to the various performances.  In addition to existing components (pagoPA, SPID), AgID intends to provide other services to Public Administrations by realizing the components of Digital Citizenship in relation to the 'Preferences' of the citizens and the 'Communications' with the PA.",
            "title": "Introduction"
        },
        {
            "location": "/#communications",
            "text": "Administrations will be able to submit multichannel notifications (SMS, E-mail, PUSH Notification, etc.) to citizens who have subscribed to a special topic of interest (opt-in) on PA portals, and/or have indicated one or more delivery contacts to receive alerts from the Public Administration (eg deadlines, payments, status changes of a forwarded practice, etc.).  The citizen interacts with a single preference management service (SGP) that will be queried by the SdA at the time of forwarding a notice to find the preferred forwarding channels and the recipient's contact addresses.\nThe citizen therefore has no direct access to the system: the information systems of the parties involved in the service will be able to send alerts to the citizens through the provided API.  Related APIs   Notifications API",
            "title": "Communications"
        },
        {
            "location": "/#preferences",
            "text": "The Preferences Management System (SGP) allows the citizen to centrally manage his personalization settings related to digital services provided by the Public Administration. Eg:   One or more addresses to receive communications from the alert system  Communication channels and subscription typologies (subscriptions)  Preferred payment methods (pagoPA)   Through this information, SGP provides the consulting authorities with the opportunity to customize their digital services. Citizens do not have direct access to the system: administration information systems use the API to access (read) the attributes managed by the SGP on behalf of citizens authenticating on their digital services.  Related APIs   Preferences API",
            "title": "Preferences"
        },
        {
            "location": "/#advantages",
            "text": "For citizens   Manage delivery contacts from a central access point (APP mobile and italia.it website)  Manage subscriptions (opt-in and opt-out) from a central access point  Access the communications history from a central access point  Make simple transactional operations by means of notifications received (ie. payments)   For administrations   Send electronic communications even without knowing the contact addresses of citizens, using only their fiscal code  Delegate the management and updating of citizens' electronic delivery contacts  Give more visibility to your notifications, where they come together in a wider / national context  Soliciting deadlines and facilitating payments in a simple and safe way  Transmit multi-channel communications for free  Assign status to communications (eg to track the status of a practice)  Get the delivery status (sent, received) of the communication and possibly reading the message where the channel allows it",
            "title": "Advantages"
        },
        {
            "location": "/#api-docs",
            "text": "Notifications API  Preferences API",
            "title": "API docs"
        },
        {
            "location": "/api-notes/",
            "text": "API notes\n\n\nNotes about the APIs and OpenAPI / Swagger mocking.\n\n\nUser\u2019s preferences\n\n\nSCIM\n\n\nSCIM is a REST/API protocol for user provisioning:\n\n\nhttp://www.simplecloud.info/\n\n\nProducing a SCIM-compatbile API for user's preferences COULD\nbring some advantages.\n\n\nWhat problems SCIM solves\n\n\n\n\nResources\u2019 Schema extensions (custom attributes)\n\n\nBulk operations (CRUD)\n\n\nSearch and fields filtering and sorting\n\n\nCommon User schema (w/SAML)\n\n\nUsers groups (schema)\n\n\nInteroperable implementations (client and server)\n\n\n\n\nSCIM References\n\n\nhttps://tools.ietf.org/html/rfc7643\n\n\nhttps://tools.ietf.org/html/rfc7644\n\n\nhttps://tools.ietf.org/html/rfc7642\n  \n\n\nUser preferences activity feed (changelog):\n\n\nhttps://tools.ietf.org/html/draft-hunt-scim-notify-00\n\n\nActivity feed reference implementation:\n\n\nhttps://github.com/jirmauritz/scim-notification-hub\n\n\nWho uses SCIM\n\n\n\n\nFacebook\n\n\nOracle\n\n\nCloudFoundry\n\n\nSlack\n\n\nTrello\n\n\nGitHub\n\n\nMicrosoft\n\n\n\n\n\u201cReady made\u201d implementations\n\n\nhttp://www.simplecloud.info/#implementations\n\n\n\n\n\n\n\n\n\n\nWSO2\n\n\nOSIAM\n\n\nGluu\n\n\n\n\n\n\n\n\n\n\nMaturity\n\n\n****\n\n\n*\n\n\n***\n\n\n\n\n\n\nProject activity\n\n\n***\n\n\n*\n\n\n***\n\n\n\n\n\n\nDocumentation\n\n\n***\n\n\n*\n\n\n***\n\n\n\n\n\n\n\n\nWSO2 + charon\n\n\nhttps://github.com/wso2/charon\n\n\n\n\n\n\ncurrent stable version (wso2 charon 2.1.0) does not support filters (user search) other than \u2018Eq\u2019\n\n\n\n\n\n\ncharon 3.x filtering is much more useful but maven archives has only 2.x:     \nhttps://mvnrepository.com/artifact/org.wso2.charon/org.wso2.charon.core\n\n\n\n\n\n\nwso2 charon 3.x much more useful as library but you you have to provide the API layer and the persistence layer (UserManager) by yourself\n\n\n\n\n\n\nmissing docs about adding custom attributes\n\n\n\n\n\n\nOSIAM\n\n\nhttps://github.com/osiam/osiam\n\n\n\n\n\n\nvery poor documentation\n\n\n\n\n\n\nvery low activity in the last year\n\n\n\n\n\n\nSCIM bulk actions not yet implemented\n\n\n\n\n\n\nOSIAM does not yet support complex data types for extensions. According to docs \"The absence of this feature will be addressed in a future version\"\n\n\n\n\n\n\nGluu\n\n\nhttps://www.gluu.org/gluu-server/\n\n\n\n\nlooks very good but cannot install on small vm\n\n\n\n\nNotifications API\n\n\nExisting APIs for messaging\n\n\n\n\n\n\nhttps://firebase.google.com/docs/cloud-messaging/send-message\n\n\n\n\n\n\nhttps://github.com/alphagov/notifications-api\n\n\n\n\n\n\nhttps://docs.nylas.com/reference\n\n\n\n\n\n\nhttps://www.mailgun.com/\n\n\n\n\n\n\nhttps://context.io/\n\n\n\n\n\n\nHandling subscriptions (opt-in / opt-out)\n\n\nTo store subscriptions data (opt-in / opt-out) we can associate a\nblacklist for every user in the system.\n\n\nIf we use SCIM we MUST add an extension to the SCIM core schema.\n\n\noptOut: [\n{\n  organization_id: <id>,\n  topics: [ t1, t2, ... ]\n}]\n\n\n\n\nwhere \norganization_id\n is the identifier of the senders blocked by\nusers for some specific topics.\n\n\nOpenAPIs mocking\n\n\nswaggerize\n\n\nhttps://github.com/krakenjs/swaggerize-express\n\n\nMocks come from \u201cswagmock\u201d, but only this fork of swagmock:\n\nhttps://github.com/fhoek/swagmock\n\nsupports \"\nallOf\n\" OpenAPI operator, so you MUST use this version and\nnot the one that comes from the original package.json in order to make it work:\n\n\ncat users.json |sed -e 's/faker/x\\\\-faker/' &gt; .tmp && mv .tmp users.json\nnpm install --save https://github.com/fhoek/swagmock\n\n\n\n\njson-schema-faker\n\n\nhttps://github.com/json-schema-faker/json-schema-faker\n\n\nSupports swagger format and generates 1 json with fake data for each endpoint\n\n\nYou can use it directly with\n\nhttps://www.npmjs.com/package/swagger-routes\n\n\nwithout using swaggerize.\n\n\nswagger-node\n\n\nBased on \u201cswagger tools\u201d.\n\n\nIf you want to use it in mock mode you MUST add for every path the directive:\n\n\n\"x-swagger-router-controller\": \"controllerName\"\n\n\n\n\nsee\n\nhttps://github.com/swagger-api/swagger-node/issues/342\n\n\nDoes not emit fake data, but you can write custom controllers to mock it.\nThis activity is \nmandatory\n whenever there is a validation on the field format (ie. an email field)\notherwise the response object will fail validation.\n\n\nswagger-node makes heavy use of \nbagpipes\n, a weird\nframework to code in YAML things you'd better write in Javascript.\n\n\nAs \nswagger-tools\n swagger-node seems \ndeprecated / unmantained\n:\n\nhttps://github.com/apigee-127/swagger-tools/issues/335\n\n\nswagger-codegen\n\n\nhttps://github.com/swagger-api/swagger-codegen\n\n\nNeeds java + maven. Does not generate mock data.\n\n\nUses swagger-tools which, when used standalone, remove the\nneed to compile the java version of swagger-codegen: see\n\nhttps://github.com/apigee-127/swagger-tools/blob/master/docs/QuickStart.md\n\n\nYou'd better start with swagger-tools or swagger-node directly.\n\n\nloopback-swagger-generator\n\n\nhttps://loopback.io/doc/en/lb3/Swagger-generator.html\n\n\nGenerates routes and models (for persistence) from swagger specs.\n\n\nPrism\n\n\nhttp://stoplight.io/platform/prism/\n\n\nIt\u2019s a free mock Swagger server from Spotlight.io. The bad part is you\nMUST embed some javascript code inside the Swagger specs to customize\ncontrollers, which is not ideal.\n\n\nGuidelines\n\n\nhttps://zalando.github.io/restful-api-guidelines\n\n\n\n\nSecure Endpoints with OAuth 2.0\n\n\nDefine and Assign Access Rights (Scopes)\n\n\nUse\n    > \nx-extensible-enum\n\n    > (and string types)\n\n\nConsider using ETag together with If-(None-)Match header\n\n\nAlways return Location header for POST\n\n\nPluralize Resource Names\n\n\nAlways Return JSON Objects As Top-Level Data Structures To Support\n    > Extensibility\n\n\nUse Problem JSON\n    > \nhttps://zalando.github.io/problem/schema.yaml\n\n\nhttps://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n\n\nUse /api as first Path Segment\n\n\nEmpty array values should not be null\n\n\nBoolean property values must not be null\n\n\n...",
            "title": "API notes"
        },
        {
            "location": "/api-notes/#api-notes",
            "text": "Notes about the APIs and OpenAPI / Swagger mocking.",
            "title": "API notes"
        },
        {
            "location": "/api-notes/#users-preferences",
            "text": "SCIM  SCIM is a REST/API protocol for user provisioning:  http://www.simplecloud.info/  Producing a SCIM-compatbile API for user's preferences COULD\nbring some advantages.  What problems SCIM solves   Resources\u2019 Schema extensions (custom attributes)  Bulk operations (CRUD)  Search and fields filtering and sorting  Common User schema (w/SAML)  Users groups (schema)  Interoperable implementations (client and server)   SCIM References  https://tools.ietf.org/html/rfc7643  https://tools.ietf.org/html/rfc7644  https://tools.ietf.org/html/rfc7642     User preferences activity feed (changelog):  https://tools.ietf.org/html/draft-hunt-scim-notify-00  Activity feed reference implementation:  https://github.com/jirmauritz/scim-notification-hub  Who uses SCIM   Facebook  Oracle  CloudFoundry  Slack  Trello  GitHub  Microsoft   \u201cReady made\u201d implementations  http://www.simplecloud.info/#implementations      WSO2  OSIAM  Gluu      Maturity  ****  *  ***    Project activity  ***  *  ***    Documentation  ***  *  ***     WSO2 + charon  https://github.com/wso2/charon    current stable version (wso2 charon 2.1.0) does not support filters (user search) other than \u2018Eq\u2019    charon 3.x filtering is much more useful but maven archives has only 2.x:      https://mvnrepository.com/artifact/org.wso2.charon/org.wso2.charon.core    wso2 charon 3.x much more useful as library but you you have to provide the API layer and the persistence layer (UserManager) by yourself    missing docs about adding custom attributes    OSIAM  https://github.com/osiam/osiam    very poor documentation    very low activity in the last year    SCIM bulk actions not yet implemented    OSIAM does not yet support complex data types for extensions. According to docs \"The absence of this feature will be addressed in a future version\"    Gluu  https://www.gluu.org/gluu-server/   looks very good but cannot install on small vm",
            "title": "User\u2019s preferences"
        },
        {
            "location": "/api-notes/#notifications-api",
            "text": "Existing APIs for messaging    https://firebase.google.com/docs/cloud-messaging/send-message    https://github.com/alphagov/notifications-api    https://docs.nylas.com/reference    https://www.mailgun.com/    https://context.io/    Handling subscriptions (opt-in / opt-out)  To store subscriptions data (opt-in / opt-out) we can associate a\nblacklist for every user in the system.  If we use SCIM we MUST add an extension to the SCIM core schema.  optOut: [\n{\n  organization_id: <id>,\n  topics: [ t1, t2, ... ]\n}]  where  organization_id  is the identifier of the senders blocked by\nusers for some specific topics.",
            "title": "Notifications API"
        },
        {
            "location": "/api-notes/#openapis-mocking",
            "text": "swaggerize  https://github.com/krakenjs/swaggerize-express  Mocks come from \u201cswagmock\u201d, but only this fork of swagmock: https://github.com/fhoek/swagmock \nsupports \" allOf \" OpenAPI operator, so you MUST use this version and\nnot the one that comes from the original package.json in order to make it work:  cat users.json |sed -e 's/faker/x\\\\-faker/' &gt; .tmp && mv .tmp users.json\nnpm install --save https://github.com/fhoek/swagmock  json-schema-faker  https://github.com/json-schema-faker/json-schema-faker  Supports swagger format and generates 1 json with fake data for each endpoint  You can use it directly with https://www.npmjs.com/package/swagger-routes  without using swaggerize.  swagger-node  Based on \u201cswagger tools\u201d.  If you want to use it in mock mode you MUST add for every path the directive:  \"x-swagger-router-controller\": \"controllerName\"  see https://github.com/swagger-api/swagger-node/issues/342  Does not emit fake data, but you can write custom controllers to mock it.\nThis activity is  mandatory  whenever there is a validation on the field format (ie. an email field)\notherwise the response object will fail validation.  swagger-node makes heavy use of  bagpipes , a weird\nframework to code in YAML things you'd better write in Javascript.  As  swagger-tools  swagger-node seems  deprecated / unmantained : \nhttps://github.com/apigee-127/swagger-tools/issues/335  swagger-codegen  https://github.com/swagger-api/swagger-codegen  Needs java + maven. Does not generate mock data.  Uses swagger-tools which, when used standalone, remove the\nneed to compile the java version of swagger-codegen: see https://github.com/apigee-127/swagger-tools/blob/master/docs/QuickStart.md  You'd better start with swagger-tools or swagger-node directly.  loopback-swagger-generator  https://loopback.io/doc/en/lb3/Swagger-generator.html  Generates routes and models (for persistence) from swagger specs.  Prism  http://stoplight.io/platform/prism/  It\u2019s a free mock Swagger server from Spotlight.io. The bad part is you\nMUST embed some javascript code inside the Swagger specs to customize\ncontrollers, which is not ideal.",
            "title": "OpenAPIs mocking"
        },
        {
            "location": "/api-notes/#guidelines",
            "text": "https://zalando.github.io/restful-api-guidelines   Secure Endpoints with OAuth 2.0  Define and Assign Access Rights (Scopes)  Use\n    >  x-extensible-enum \n    > (and string types)  Consider using ETag together with If-(None-)Match header  Always return Location header for POST  Pluralize Resource Names  Always Return JSON Objects As Top-Level Data Structures To Support\n    > Extensibility  Use Problem JSON\n    >  https://zalando.github.io/problem/schema.yaml  https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes  Use /api as first Path Segment  Empty array values should not be null  Boolean property values must not be null  ...",
            "title": "Guidelines"
        }
    ]
}