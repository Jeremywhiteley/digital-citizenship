{
    "swagger": "2.0",
    "info": {
        "version": "1.0",
        "title": "Notification API",
        "description": "Notification API"
    },
    "host": "e2effzjxvtgbmuilw-mock.stoplight-proxy.io",
    "basePath": "/v1",
    "schemes": [
        "https"
    ],
    "paths": {
        "/Messages/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getMessage",
                "summary": "Get Message",
                "tags": [
                    "Messages"
                ],
                "responses": {
                    "200": {
                        "description": "Success: message exists.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Message"
                                }
                            ],
                            "description": ""
                        }
                    },
                    "400": {
                        "$ref": "#/responses/trait:apiErrors:400"
                    },
                    "401": {
                        "$ref": "#/responses/trait:apiErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:apiErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:apiErrors:404"
                    },
                    "429": {
                        "$ref": "#/responses/trait:apiErrors:429"
                    }
                }
            }
        },
        "/Users/{id}/messages": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "listMessagesByUser",
                "summary": "List Messages (by user)",
                "tags": [
                    "Messages"
                ],
                "description": "Messages will be returned in inverse delivery order (from last to first)",
                "parameters": [
                    {
                        "$ref": "#/parameters/trait:pagination:page"
                    },
                    {
                        "$ref": "#/parameters/trait:pagination:page_size"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "array",
                            "description": "Success.",
                            "items": {
                                "$ref": "#/definitions/Message"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/responses/trait:apiErrors:400"
                    },
                    "401": {
                        "$ref": "#/responses/trait:apiErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:apiErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:apiErrors:404"
                    },
                    "429": {
                        "$ref": "#/responses/trait:apiErrors:429"
                    }
                }
            }
        },
        "/Client/{id}/messages": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "listMessagesByClient",
                "summary": "List Messages (by client)",
                "tags": [
                    "Messages"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/trait:pagination:page"
                    },
                    {
                        "$ref": "#/parameters/trait:pagination:page_size"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "array",
                            "description": "Success.",
                            "items": {
                                "$ref": "#/definitions/Message"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/responses/trait:apiErrors:400"
                    },
                    "401": {
                        "$ref": "#/responses/trait:apiErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:apiErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:apiErrors:404"
                    },
                    "429": {
                        "$ref": "#/responses/trait:apiErrors:429"
                    }
                }
            }
        },
        "/Messages": {
            "post": {
                "operationId": "sendMessage",
                "summary": "Send Message",
                "tags": [
                    "Messages"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MessageDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: message queued.",
                        "schema": {
                            "allOf": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "status": {
                                            "$ref": "#/definitions/MessageStatus"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "status"
                                    ]
                                }
                            ],
                            "description": "Message queued.",
                            "type": "object"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/trait:apiErrors:400"
                    },
                    "401": {
                        "$ref": "#/responses/trait:apiErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:apiErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:apiErrors:404"
                    },
                    "429": {
                        "$ref": "#/responses/trait:apiErrors:429"
                    }
                }
            }
        }
    },
    "parameters": {
        "trait:pagination:page": {
            "name": "page",
            "in": "query",
            "type": "integer",
            "default": 1,
            "minimum": 1
        },
        "trait:pagination:page_size": {
            "name": "page_size",
            "in": "query",
            "type": "integer",
            "default": 50,
            "minimum": 1
        }
    },
    "responses": {
        "trait:apiErrors:400": {
            "description": "",
            "schema": {
                "description": "Indicates that the request could not be parsed as JSON, or it contained invalid fields.",
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": "BadRequestError"
                    },
                    "message": {
                        "type": "string",
                        "default": ""
                    },
                    "status": {
                        "type": "integer",
                        "default": 400
                    }
                }
            }
        },
        "trait:apiErrors:401": {
            "description": "",
            "schema": {
                "description": "There was an error authenticating the sender account.",
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": "Authorisation header is missing"
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer",
                        "default": 401
                    }
                }
            }
        },
        "trait:apiErrors:403": {
            "description": "",
            "schema": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": "Forbidden"
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer",
                        "default": 403
                    }
                }
            }
        },
        "trait:apiErrors:404": {
            "description": "",
            "schema": {
                "type": "object",
                "description": "Object Not Found.",
                "properties": {
                    "error": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer"
                    }
                }
            }
        },
        "trait:apiErrors:429": {
            "description": "",
            "schema": {
                "type": "object",
                "description": "Quota excedeed.",
                "properties": {
                    "error": {
                        "type": "string",
                        "default": "API Error"
                    },
                    "message": {
                        "type": "string"
                    },
                    "status": {
                        "default": 429,
                        "type": "integer"
                    }
                }
            }
        }
    },
    "definitions": {
        "Content": {
            "title": "Content",
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                },
                "body_text": {
                    "type": "string",
                    "faker": "lorem.paragraph"
                },
                "body_html": {
                    "type": "string",
                    "faker": "lorem.paragraph"
                }
            },
            "required": [
                "title"
            ]
        },
        "MessageDefinition": {
            "title": "MessageDefinition",
            "type": "object",
            "properties": {
                "to": {
                    "description": "One fiscal code (CF).\n",
                    "type": "string"
                },
                "dry_run": {
                    "type": "boolean",
                    "description": "This parameter, when set to true, allows developers to test a request without actually sending a message.\n\nThe default value is false."
                },
                "time_to_live": {
                    "type": "integer",
                    "description": "This parameter specifies how long (in seconds) the message should be kept in storage if the device is offline. The maximum time to live supported is 4 weeks, and the default value is 4 weeks.",
                    "minimum": 0
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "content": {
                    "$ref": "#/definitions/Content"
                }
            },
            "required": [
                "to",
                "content"
            ]
        },
        "MessageStatus": {
            "title": "MessageStatus",
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "QUEUED",
                        "SENDING",
                        "SENT",
                        "DELIVERED",
                        "READ",
                        "FAILED"
                    ],
                    "description": "QUEUED: the message has been accepeted for delivery\n\nSENDING: the message is in charge of the delivery service (ie. sms gatewy or mail server)\n\nSENT: the message was sent by the delivery service\n\nDELIVERED: the message reached the user inbox (ie. mail server or phone)\n\nREAD: the user read the message\n\nFAILED: something wong happened, check the error code and message\n\n"
                },
                "error_message": {
                    "type": "string"
                },
                "error_code": {
                    "type": "string",
                    "enum": [
                        "PERMANENT_FAILURE",
                        "TEMPORARY_FAILURE"
                    ]
                },
                "sent_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "delivered_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "read_at": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "Message": {
            "title": "Message",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "created_at": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "updated_at": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "status": {
                            "type": "object",
                            "properties": {
                                "mail": {
                                    "$ref": "#/definitions/MessageStatus"
                                },
                                "mobile": {
                                    "$ref": "#/definitions/MessageStatus"
                                },
                                "web": {
                                    "$ref": "#/definitions/MessageStatus"
                                }
                            }
                        }
                    },
                    "required": [
                        "id"
                    ]
                },
                {
                    "$ref": "#/definitions/MessageDefinition"
                }
            ]
        }
    }
}
