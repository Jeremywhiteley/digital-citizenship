swagger: '2.0'
info:
  version: 0.0.1
  title: Notification API
  description: Notification API.
host: localhost
basePath: /api/v1
schemes:
  - https
paths:
  '/messages/{id}':
    x-swagger-router-controller: Messages
    parameters:
      - name: id
        in: path
        type: string
        required: true
        description: The message ID.
    get:
      operationId: getMessage
      summary: Get Message
      description: >-
        The previously submitted message with the provided message ID is
        returned.
      responses:
        '200':
          description: Message found.
          schema:
            $ref: '#/definitions/AcceptedMessage'
        '404':
          description: >-
            No previously submitted message with the provided message ID was
            found.
  '/users/{fiscal_number}/messages':
    x-swagger-router-controller: Messages
    parameters:
      - $ref: '#/parameters/PaginationRequest'
      - name: fiscal_number
        in: path
        type: string
        required: true
        description: 'The fiscal number of the user, all upper case.'
        maxLength: 16
        minLength: 16
        pattern: >-
          [A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]
    get:
      operationId: getMessagesByUser
      summary: Get messages by user
      description: >-
        Returns the messages for the user identified by the provided fiscal
        code.

        Messages will be returned in inverse submission order (from last to
        first)
      responses:
        '200':
          description: Found.
          schema:
            allOf:
              - type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/definitions/AcceptedMessage'
              - $ref: '#/definitions/PaginationResponse'
          examples: {}
        '404':
          description: No user found.
      parameters: []
    post:
      operationId: submitMessageforUser
      summary: Submit a message
      description: Submits a message for delivery to a user.
      parameters:
        - name: message
          in: body
          schema:
            $ref: '#/definitions/SubmittedMessage'
      responses:
        '201':
          description: Message accepted for delivery.
          schema:
            allOf:
              - properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    $ref: '#/definitions/MessageStatus'
                required:
                  - id
                  - status
            description: ''
            type: object
          headers:
            Location:
              type: string
              description: >-
                Location (URL) of accepted message resource.

                A GET request to this URL returns the message status and
                details.
definitions:
  ProblemJson:
    title: Problem Type
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the problem type.  When dereferenced,
          it SHOULD provide human-readable documentation for the problem type
          (e.g., using HTML).
        default: 'about:blank'
        example: 'https://example.com/problem/constraint-violation'
      title:
        type: string
        description: |
          A short, summary of the problem type. Written in english and readable
          for engineers (usually not suited for non technical stakeholders and
          not localized); example: Service Unavailable
      status:
        type: integer
        format: int32
        description: >
          The HTTP status code generated by the origin server for this
          occurrence

          of the problem.
        minimum: 100
        maximum: 600
        exclusiveMaximum: true
        example: 503
      detail:
        type: string
        description: |
          A human readable explanation specific to this occurrence of the
          problem.
        example: Connection to database timed out
      instance:
        type: string
        format: uri
        description: >-
          An absolute URI that identifies the specific occurrence of the
          problem.

          It may or may not yield further information if dereferenced.
  MessageContent:
    title: MessageContent
    type: object
    properties:
      body_short:
        type: string
        description: >-
          An abstract of the message, in plain text. The content of this field
          will be delivered to channels that support a limited amount of
          characters (e.g. SMS, mobile notifications, etc...).
        minLength: 3
        maxLength: 100
      body_long:
        type: string
        description: >-
          A long version of the message, in plain text. The content of this
          field will be delivered to channels that don't have any limit in terms
          of content size (e.g. email, etc...). The long version of the message
          is optional and should be provided only in cases when a longer message
          (compared to the short version provided in body_short) gives more
          information to the user. This field should not be a duplicate of
          body_short.
        minLength: 100
    required:
      - body_short
  SubmittedMessage:
    title: SubmittedMessage
    type: object
    properties:
      dry_run:
        type: boolean
        description: >-
          This parameter, when set to true, allows developers to test a request
          without actually sending a message.


          The default value is false.
      time_to_live:
        type: integer
        description: >-
          This parameter specifies for how long (in seconds) the system will try
          to deliver the message to the channels configured by the user.
        minimum: 3600
        maximum: 31536000
        default: 3600
      content:
        $ref: '#/definitions/MessageContent'
    required:
      - content
  MessageStatus:
    title: MessageStatus
    type: object
    properties:
      status:
        type: string
        description: |
          ACCEPTED: the message has been accepted for delivery

          SENT: the message was delivered to the channel

          FAILED: something wong happened, check the error code and message

          TIMED_OUT:  in case a TTL was set
        x-extensible-enum:
          - ACCEPTED
          - SENT
          - TIMED_OUT
          - FAILED
      failed_at:
        type: string
        format: date-time
      sent_at:
        type: string
        format: date-time
      problem:
        $ref: '#/definitions/ProblemJson'
  AcceptedMessage:
    title: AcceptedMessage
    allOf:
      - type: object
        properties:
          id:
            type: string
            format: uuid
          accepted_at:
            type: string
            format: date-time
          status:
            type: object
            default: {}
            properties:
              mail:
                $ref: '#/definitions/MessageStatus'
              sms:
                $ref: '#/definitions/MessageStatus'
              browser:
                $ref: '#/definitions/MessageStatus'
              app:
                $ref: '#/definitions/MessageStatus'
        required:
          - id
      - $ref: '#/definitions/SubmittedMessage'
  PaginationResponse:
    type: object
    title: pagination
    description: Pagination response parameters.
    properties:
      index:
        type: integer
        minimum: 0
        description: The index of the first item returned in the collection.
      page_size:
        type: integer
        minimum: 1
        description: Number of items returned for each page.
      next:
        type: string
responses: {}
parameters:
  PaginationRequest:
    name: cursor
    in: query
    type: string
    minimum: 1
    description: An opaque identifier that points to the next item in the collection.
